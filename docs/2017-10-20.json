{
  "swagger": "2.0",
  "info": {
    "version": "3200.9.0",
    "title": "Learn APIs"
  },
  "host": "localhost",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "basic": {
      "description": "The application key and secret, encoded using RFC 2617 Basic authentication.",
      "type": "basic"
    },
    "bearer": {
      "description": "OAuth2 bearer token, obtained by sending a client_credentials grant request to /learn/api/public/v1/oauth2/token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "paths": {
    "/learn/api/public/v1/oauth2/authorizationcode": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Authorization Code",
        "description": "Requests an OAuth 2 authorization code.\n\n**Since**: 3200.7.0",
        "parameters": [
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "the redirectUri to send the end user to once an authorization code response is made in Oauth2 Authorization Code Workflow",
            "required": true,
            "type": "string"
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "Required. The response_type expected which must to be set to \"code\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Required. The client identifier for the registered application.",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "the space delimited scope(s) being requested for this authorization. Example value: \"read write offline\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Opaque value used by client to maintain state between request and callback. Used to prevent cross-site request forgery.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/learn/api/public/v1/oauth2/token": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "Request Token",
        "description": "Requests an OAuth 2 access token.\n\n**Since**: 2015.11.0",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "description": "Must be 'client_credentials', 'authorization_code' @Since 3200.7.0, or 'refresh_token' @Since 3200.7.0.",
            "required": true,
            "type": "string",
            "enum": [
              "client_credentials"
            ]
          },
          {
            "name": "code",
            "in": "query",
            "description": "@Since 3200.7.0 the authorization code granted by an end user for use by an application in Oauth2 Authorization Code Workflow",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "@Since 3200.7.0 the redirectUri to send the end user to once an access token response is made in Oauth2 Authorization Code Workflow",
            "required": false,
            "type": "string"
          },
          {
            "name": "refresh_token",
            "in": "query",
            "description": "@Since 3200.7.0 the refresh token granted for use by an application in Oauth2 Refresh Token Workflow",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuth2AccessToken"
            }
          },
          "400": {
            "description": "Invalid access token request.",
            "schema": {
              "$ref": "#/definitions/OAuth2Error"
            }
          },
          "401": {
            "description": "Invalid client credentials, or no access granted to this Learn server.",
            "schema": {
              "$ref": "#/definitions/OAuth2Error"
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/learn/api/public/v1/announcements": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "Get Announcements",
        "description": "Return a list of System Announcements. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.VIEW' & 'system.announcements.MODIFY' entitlement can view 'available' & 'unavailable' System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Announcement"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "announcements"
        ],
        "summary": "Create Announcement",
        "description": "Create a System Announcement. Users with the 'system.announcements.CREATE' entitlement can create System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this System Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The message body of the System Announcement. This field supports BbML."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).",
                          "enum": [
                            "Permanent",
                            "Restricted"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                },
                "showAtLogin": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on the login page."
                },
                "showInCourses": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on courses."
                },
                "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date that the System Announcement was created."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create announcements",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/announcements/{announcementId}": {
      "get": {
        "tags": [
          "announcements"
        ],
        "summary": "Get Announcement",
        "description": "Get a System Announcement. Users with the 'system.announcements.VIEW' entitlement can view 'available' System Announcements. Users with the 'system.announcements.VIEW' & 'system.announcements.MODIFY' entitlement can view 'available' & 'unavailable' System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "announcements"
        ],
        "summary": "Delete Announcement",
        "description": "Delete a System Announcement. Users with the 'system.announcements.DELETE' entitlement can delete System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "An error occurred while deleting an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to delete an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "announcements"
        ],
        "summary": "Update Announcement",
        "description": "Update a System Announcement. Users with the 'system.announcements.MODIFY' entitlement can update System Announcements.\n\n**Since**: 3100.7.0",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of this System Announcement."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The message body of the System Announcement. This field supports BbML."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "duration": {
                      "type": "object",
                      "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).",
                          "enum": [
                            "Permanent",
                            "Restricted"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement starts being Available."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this Announcement stops being Available."
                        }
                      }
                    }
                  }
                },
                "showAtLogin": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on the login page."
                },
                "showInCourses": {
                  "type": "boolean",
                  "description": "Whether this System Announcement should be displayed on courses."
                },
                "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date that the System Announcement was created."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Announcement"
            }
          },
          "400": {
            "description": "An error occurred while deleting an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to update an announcement",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Announcement cannot be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Courses",
        "description": "Returns a list of courses and organizations.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "courseId",
            "in": "query",
            "description": "Search for courses with courseId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search for courses with name properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search for courses with description properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for courses with externalId properties that contain this value.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for courses with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "allowGuests",
            "in": "query",
            "description": "Search for courses which are configured to allow/disallow guest access, based on input.  Default: n/a (return courses regardless of guests allowed)\n\n**Since**: 3200.3.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for courses with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "termId",
            "in": "query",
            "description": "Search for courses with this termId.  This may optionally be the term's externalId using the syntax \"externalId:spring2015\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Search for courses by organization flag.  A value of 'true' indicates that search results should be limited to only Organizations.  A value of 'false' indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Course"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "summary": "Create Course",
        "description": "Creates a course or organization.\n\nThe 'system.course.CREATE' entitlement is needed to create a course, while 'system.org.CREATE' is needed for an organization.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "courseId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course.  Defaults to the courseId.\n\nFormerly known as 'batchUid'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "courseId": {
                  "type": "string",
                  "description": "The Course ID attribute, shown to users in the UI."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "organization": {
                  "type": "boolean",
                  "description": "Whether this object represents an Organization.  Defaults to false."
                },
                "ultraStatus": {
                  "type": "string",
                  "description": "Whether the course is rendered using Classic or Ultra Course View.",
                  "enum": [
                    "Undecided",
                    "Classic",
                    "Ultra",
                    "UltraPreview"
                  ]
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course.  Defaults to true."
                },
                "readOnly": {
                  "type": "boolean",
                  "description": "Whether the course is closed to any further changes. This status does not affect availability of the course for viewing in any way, just updates. readOnly is only valid in an Ultra course; Classic courses can not be closed."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course.  This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students.  Instructors can always access the course.  If set to 'Term', the course's parent term availability settings will be used.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course.  Possible values are:\n\n- Continuous: The course is active on an ongoing basis.  This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course.  Defaults to InstructorLed.",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course.  May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends.  May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course.  May only be set if enrollment.type is SelfEnrollment."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course."
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to create courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Course",
        "description": "Loads a specific course or organization.\n\nUsers with the 'course.configure-properties.EXECUTE' entitlement can access all course properties.\n\nUsers enrolled in the course have read access to all properties except:\n\n- uuid\n- externalId\n- dataSourceId\n- created\n- allowGuests\n- enrollment.accessCode\n\nUsers with no access to the course only have read access to the following properties:\n\n- id\n- courseId\n- name\n- description\n- organization\n- readOnly\n- termId\n- availability.available\n- availability.duration.type\n- availability.duration.start\n- availability.duration.end\n- availability.duration.daysOfUse\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "Failed to create course; or The request did not specify a valid courseId",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course is not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "courses"
        ],
        "summary": "Delete Course",
        "description": "Deletes a course or organization.\n\nThe 'system.course.DELETE' entitlement is needed to delete a course, while 'system.org.DELETE' is needed for an organization.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "removeFiles",
            "in": "query",
            "description": "Whether to delete course files.  Defaults to true.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid courseId provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified Course object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "courses"
        ],
        "summary": "Update Course",
        "description": "Updates a course or organization.\n\nTo update a course, the user must have either 'system.course|org.properties.MODIFY' or 'course.configure-properties.EXECUTE' entitlements.  However, if the user has the latter entitlement, then additional entitlements are needed to be able to update certain fields, as shown below: \n\n | Field                           | Entitlements Required                                                  |\n |---------------------------------|------------------------------------------------------------------------|\n | name                            | course.name.MODIFY                                                     |\n | description                     | course.name.MODIFY                                                     |\n | allowGuests                     | course.configure-guest-access.EXECUTE                                  |\n | enrollment.type                 | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.start                | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.end                  | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | enrollment.accessCode           | course.configure-properties.EXECUTE, course.enrollment.MODIFY          |\n | availability.available          | course.configure-properties.EXECUTE, course.availability.MODIFY        |\n | locale.id                       | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | locale.force                    | course.configure-properties.EXECUTE, course.locale.MODIFY              |\n | availability.duration.type      | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.start     | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.end       | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n | availability.duration.daysOfUse | course.configure-properties.EXECUTE, course.configure-duration.EXECUTE |\n \n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course.  Defaults to the courseId.\n\nFormerly known as 'batchUid'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the course."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the course."
                },
                "ultraStatus": {
                  "type": "string",
                  "description": "Whether the course is rendered using Classic or Ultra Course View.",
                  "enum": [
                    "Undecided",
                    "Classic",
                    "Ultra",
                    "UltraPreview"
                  ]
                },
                "allowGuests": {
                  "type": "boolean",
                  "description": "Whether guests (users with the role guest) are allowed access to the course.  Defaults to true."
                },
                "readOnly": {
                  "type": "boolean",
                  "description": "Whether the course is closed to any further changes. This status does not affect availability of the course for viewing in any way, just updates. readOnly is only valid in an Ultra course; Classic courses can not be closed."
                },
                "termId": {
                  "type": "string",
                  "description": "The ID of the term associated to this course.  This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the course is currently available to students.  Instructors can always access the course.  If set to 'Term', the course's parent term availability settings will be used.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled",
                        "Term"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the course is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the course.  Possible values are:\n\n- Continuous: The course is active on an ongoing basis.  This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays",
                            "Term"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this course ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days this course can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling how students may enroll in the course.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Specifies the enrollment options for the course.  Defaults to InstructorLed.",
                      "enum": [
                        "InstructorLed",
                        "SelfEnrollment",
                        "EmailEnrollment"
                      ]
                    },
                    "start": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollments are allowed for the course.  May only be set if enrollment.type is SelfEnrollment."
                    },
                    "end": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which enrollment in this course ends.  May only be set if enrollment.type is SelfEnrollment."
                    },
                    "accessCode": {
                      "type": "string",
                      "description": "The enrollment access code associated with this course.  May only be set if enrollment.type is SelfEnrollment."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "Settings controlling localization within the course.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale of this course."
                    },
                    "force": {
                      "type": "boolean",
                      "description": "Whether students are forced to use the course's specified locale."
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Course"
            }
          },
          "400": {
            "description": "The request did not specify a valid course",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user does not have entitlements to modify courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The course was not found or is unavailable and the user does not have the permission to view unavailable courses",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A course with the same courseId or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/children": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Children",
        "description": "Returns a list of course cross-listings.\n\nThe 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.\n\n**Since**: 3000.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CourseChild"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Course not a cross-listed parent",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Parent or child course not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/children/{childCourseId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Get Child",
        "description": "Loads a specific course cross-listing.\n\nThe 'system.course.cross-list.VIEW' or 'system.org.cross-list.VIEW' entitlement is needed.\n\n**Since**: 3000.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/childCourseId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CourseChild"
            }
          },
          "400": {
            "description": "Course not a cross-listed parent",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Parent or child course not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Contents",
        "description": "List top-level content items in a course.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Content"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Content",
        "description": "Create a new top-level content item.  This is only allowed in a Classic course.  Currently only folders may be created as top-level content items.\n\n**Since**: 3000.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The body text associated with this content. This field supports BbML."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role."
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Content",
        "description": "Load a specific content item from a course.\n\nUsers with at least one of the following entitlements may access any content item:\n\n- course.adaptiverelease.CREATE\n- course.adaptiverelease.DELETE\n- course.adaptiverelease.MODIFY\n- course.adaptiverelease.VIEW\n- course.configure-areas.EXECUTE\n- course.content-item.copy.EXECUTE\n- course.content.DELETE\n- course.content.MODIFY\n- course.learningstandards.alignment.CREATE\n- course.performance.dashboard.VIEW\n\nFor other users, permission to view the content item will depend on the availability settings of the course and the content item.  The following fields will be filtered out:\n\n- availability.available\n- availability.allowGuests\n- availability.adaptiveRelease\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Delete Content",
        "description": "Delete a content item.\n\nThe 'course.content.DELETE' entitlement is required.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Content Handler has not been implemented; or Top Level Content Folders can not be deleted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Invalid Content ID",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "content"
        ],
        "summary": "Update Content",
        "description": "Update a content item.\n\nThe 'course.content.MODIFY' entitlement is required.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The body text associated with this content. This field supports BbML."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role."
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Get File Attachments",
        "description": "Get the file attachment meta data associated to the Content Item\n\nSupported Content Item Types: Content File (resource/x-bb-file)\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FileAttachment"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Get File Attachment",
        "description": "Get the file attachment meta data by an attachment ID\n\nSupported Content Item Types: Content File (resource/x-bb-file)\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileAttachment"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/attachments/{attachmentId}/download": {
      "get": {
        "tags": [
          "content file attachments"
        ],
        "summary": "Download",
        "description": "Download the contents of a Content Item.\n\nSupported Content Item Types: Content File (resource/x-bb-file)\n\n**Since**: 3200.8.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/children": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Children",
        "description": "List all child content items directly beneath another content item.  This is only valid for content items that are allowed to have children (e.g. Folders).\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Search for child content recursively.  A value of 'true' indicates that search results should include all content descendants within the hierarchy of the specified parent.  A value of 'false' indicates results should be limited to immediate children only.  Not setting this field defaults to 'false' behavior; only including immediate children.\n\n**Since**: 3100.2.0",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Content"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Child",
        "description": "Create a new child content item beneath an existing content item.  This is only valid for content items that are allowed to have children (e.g. Folders).\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title"
              ],
              "properties": {
                "parentId": {
                  "type": "string",
                  "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
                },
                "title": {
                  "type": "string",
                  "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
                },
                "body": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The body text associated with this content. This field supports BbML."
                },
                "description": {
                  "type": "string",
                  "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline."
                },
                "position": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The position of this content within its parent folder."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the content to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.",
                      "enum": [
                        "Yes",
                        "No",
                        "PartiallyVisible"
                      ]
                    },
                    "allowGuests": {
                      "type": "boolean",
                      "description": "Whether this content is available to users with the 'guest' role."
                    },
                    "adaptiveRelease": {
                      "type": "object",
                      "description": "Settings controlling adaptive release of the content to students.",
                      "title": "AdaptiveRelease",
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will become available to students."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date when this content will no longer be available to students."
                        }
                      }
                    }
                  }
                },
                "contentHandler": {
                  "$ref": "#/definitions/ContentHandler"
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Content"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups": {
      "get": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Get Content Groups",
        "description": "Returns a list of content group associations for the specified content.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.DELETE - course.content.MODIFY  Callers enrolled in the course will only be able to see Groups that are available to them.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ContentGroup"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/contents/{contentId}/groups/{groupId}": {
      "get": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Get Content Group",
        "description": "Returns a content group association for the specified content and group.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.DELETE - course.content.MODIFY  Callers enrolled in the course will only be able to see Groups that are available to them.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ContentGroup"
            }
          },
          "400": {
            "description": "Invalid data specified in the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Group association not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Create Content Group",
        "description": "Creates a content group association.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- course.content.MODIFY\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "contentId": {
                  "type": "string",
                  "description": "The ID of the associated content."
                },
                "groupId": {
                  "type": "string",
                  "description": "The ID of the association of content and group."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContentGroup"
            }
          },
          "400": {
            "description": "Invalid Course in body of request; or Invalid association data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Content does not exist; or Group does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Group already associated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "content group assignments"
        ],
        "summary": "Delete Content Group",
        "description": "Deletes a user ContentGroup from the specified course.\n\nRequired entitlements:\n\n- course.content.DELETE - course.content.MODIFY \n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/users": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get Memberships",
        "description": "Returns a list of user memberships for the specified course or organization.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- For courses: 'course.user.VIEW', 'system.user.course.enrollment.VIEW', or 'system.courseuserlist.VIEW'\n- For organizations: 'course.user.VIEW', 'system.user.org.enrollment.VIEW', or 'system.orguserlist.VIEW'\nCallers enrolled in the course will only be able to see memberships that are available and that have opted to be included in the course roster.\n\nFor callers enrolled in the course as well as those with the 'course.user.VIEW' entitlement, system fields such as externalId and dataSourceId will not be visible.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for memberships with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for memberships with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Membership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/users/{userId}": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get Membership",
        "description": "Loads a user membership in the specified course.\n\nEntitlement and field visibility rules are the same as those when loading the memberships collection.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "400": {
            "description": "Invalid data specified in the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Membership not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "course memberships"
        ],
        "summary": "Create Membership",
        "description": "Creates a user membership in the specified course.\n\nMinimal entitlements required:\n\n- For courses: 'course.user-enroll.EXECUTE', 'system.enrollment.CREATE'\n- For organizations: 'course.user-enroll.EXECUTE', 'org.enrollment.CREATE'\n- For courses or organizations that have enabled self enrollment: 'system.generic.VIEW'\n\nBy default courseRoleId is Student and availability.available is Yes.  Providing different values for these fields requires extra entitlements:\n\n- For courses: 'course.user-role.MODIFY' or 'course.user.MODIFY'\n- For organizations: 'course.user-role.MODIFY' or 'org.user.MODIFY'\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course membership.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the membership is available in the course. If the membership is not available, the associated user is considered inactive in the course.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "courseRoleId": {
                  "type": "string",
                  "description": "The user's role in the course.\n\nLearn provides the following immutable course roles:\n\n- Student: Has no access to the Control Panel.  This is the default role.\n- Guest: Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards.\nOut of the box, Learn also comes with the following roles, although they are customizable and may have different capabilities from what is documented here:\n\n- Instructor: Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students.\n- TeachingAssistant: The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school.\n- CourseBuilder: Manages the course without having access to student grades.\n- Grader: Assists the instructor in the creation, management, delivery, and grading of items.\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.",
                  "enum": [
                    "Instructor",
                    "TeachingAssistant",
                    "CourseBuilder",
                    "Grader",
                    "Student",
                    "Guest"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "400": {
            "description": "Invalid Course in body of request; or User not in same Domain as Logged-on User; or User is an Observer; or Access Code Incorrect; or Invalid CourseMembership data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User is a System Admin and the Logged-on User is not a System Administrator; or Logged-on User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "User does not exist; or Role does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "User already enrolled",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course memberships"
        ],
        "summary": "Delete Membership",
        "description": "Deletes a user membership from the specified course.\n\nRequired entitlements:\n\n- For courses: 'system.enrollment.DELETE' or 'course.user.DELETE'\n- For organizations: 'system.enrollment.DELETE' or 'org.enrollment.DELETE'\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course memberships"
        ],
        "summary": "Update Membership",
        "description": "Updates a user membership in the specified course. \n\n | Field                  | Entitlements Required                                                           |\n |------------------------|---------------------------------------------------------------------------------|\n | dataSourceId           | 'course.user.MODIFY' or 'org.user.MODIFY'                                       |\n | courseRoleId           | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.user-role.MODIFY'           |\n | availability.available | 'course.user.MODIFY', 'org.user.MODIFY', or 'course.course-availability.MODIFY' |\n \n\nIn addition, callers must have standard view entitlements to receive a response.  Without view entitlements the operation will be performed but an empty result object will be returned.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the course membership.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the membership is available in the course. If the membership is not available, the associated user is considered inactive in the course.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "courseRoleId": {
                  "type": "string",
                  "description": "The user's role in the course.\n\nLearn provides the following immutable course roles:\n\n- Student: Has no access to the Control Panel.  This is the default role.\n- Guest: Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards.\nOut of the box, Learn also comes with the following roles, although they are customizable and may have different capabilities from what is documented here:\n\n- Instructor: Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students.\n- TeachingAssistant: The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school.\n- CourseBuilder: Manages the course without having access to student grades.\n- Grader: Assists the instructor in the creation, management, delivery, and grading of items.\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.",
                  "enum": [
                    "Instructor",
                    "TeachingAssistant",
                    "CourseBuilder",
                    "Grader",
                    "Student",
                    "Guest"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Membership"
            }
          },
          "400": {
            "description": "The request did not specify valid data",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "User has insufficient privileges",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Course not found; or Course-membership not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/dataSources": {
      "get": {
        "tags": [
          "data sources"
        ],
        "summary": "Get Data Sources",
        "description": "Returns a list of data sources.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/externalId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DataSource"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "data sources"
        ],
        "summary": "Create Data Source",
        "description": "Creates a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "externalId"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the data source."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/dataSources/{dataSourceId}": {
      "get": {
        "tags": [
          "data sources"
        ],
        "summary": "Get Data Source",
        "description": "Loads a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/dataSourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data sources"
        ],
        "summary": "Delete Data Source",
        "description": "Deletes a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/dataSourceId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "data sources"
        ],
        "summary": "Update Data Source",
        "description": "Updates a data source.\n\nThe 'system.datasource.manager.VIEW' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/dataSourceId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the data source."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DataSource"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/system/version": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Version",
        "description": "Gets the current Learn server version.\n\n**Since**: 3000.3.0",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionInfo"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/terms": {
      "get": {
        "tags": [
          "terms"
        ],
        "summary": "Get Terms",
        "description": "Returns a list of terms.\n\nAt least one of the entitlements 'system.term.VIEW' or 'system.term.MODIFY' are needed.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for term with externalId properties that contain this value.\n\n**Since**: 3100.6.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for term with this dataSourceId.\n\n**Since**: 3100.6.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Term"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "terms"
        ],
        "summary": "Create Term",
        "description": "Creates a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "externalId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the term."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The description of the term. This field supports BbML."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the term to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the term is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the term.  Possible values are:\n\n- Continuous: The term is active on an ongoing basis.  This is the default.\n- DateRange: The term will only be available between specific date ranges.\n- FixedNumDays: The term will only be available for a set number of days.",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/terms/{termId}": {
      "get": {
        "tags": [
          "terms"
        ],
        "summary": "Get Term",
        "description": "Loads a term.\n\nThe caller must be enrolled in a course contained within the term, or must have at least one of the entitlements 'system.term.VIEW' or 'system.term.MODIFY'.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/termId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "terms"
        ],
        "summary": "Delete Term",
        "description": "Deletes a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/termId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "terms"
        ],
        "summary": "Update Term",
        "description": "Updates a term.\n\nThe 'system.term.MODIFY' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/termId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the term."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The description of the term. This field supports BbML."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the term to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    },
                    "duration": {
                      "type": "object",
                      "description": "Settings controlling the length of time the term is available.",
                      "title": "Duration",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The intended length of the term.  Possible values are:\n\n- Continuous: The term is active on an ongoing basis.  This is the default.\n- DateRange: The term will only be available between specific date ranges.\n- FixedNumDays: The term will only be available for a set number of days.",
                          "enum": [
                            "Continuous",
                            "DateRange",
                            "FixedNumDays"
                          ]
                        },
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                        },
                        "daysOfUse": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Term"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/uploads": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload",
        "description": "Upload a file to temporary storage.\n\nReturns an ID of the file reference, so it can be used for processing by a different service.\n\n**Since**: 3100.12.0",
        "parameters": [
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UploadedFileInfo"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Users",
        "description": "Returns a list of users.\n\nAt least one of the entitlements 'system.user.VIEW' or 'user.VIEW' are needed.\n\nNote: Users with the 'SystemAdmin' role are only included in the results if the logged on user also has this role.\n\n**Since**: 3000.1.0",
        "parameters": [
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "userName",
            "in": "query",
            "description": "Search for users with userName properties that contain this value.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for users with externalId properties that contain this value.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for users with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for users with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/User"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "description": "Creates a user.\n\nThe 'system.user.CREATE' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "password",
                "userName"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "userName": {
                  "type": "string",
                  "description": "The userName property, shown in the UI."
                },
                "studentId": {
                  "type": "string",
                  "description": "The user's student ID name or number as defined by the school or institution."
                },
                "password": {
                  "type": "string",
                  "description": "The user's login password."
                },
                "educationLevel": {
                  "type": "string",
                  "description": "The education level of this user.",
                  "enum": [
                    "K8",
                    "HighSchool",
                    "Freshman",
                    "Sophomore",
                    "Junior",
                    "Senior",
                    "GraduateSchool",
                    "PostGraduateSchool",
                    "Unknown"
                  ]
                },
                "gender": {
                  "type": "string",
                  "description": "The gender of this user.",
                  "enum": [
                    "Female",
                    "Male",
                    "Unknown"
                  ]
                },
                "birthDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The birth date of this user."
                },
                "systemRoleIds": {
                  "type": "array",
                  "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
                  "items": {
                    "$ref": "#/definitions/SystemRoleEnum"
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the user account.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the user is available within the system. Unavailable users cannot log in.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "name": {
                  "type": "object",
                  "description": "Properties used to build the user's display name.",
                  "title": "Name",
                  "properties": {
                    "given": {
                      "type": "string",
                      "description": "The given (first) name of this user."
                    },
                    "family": {
                      "type": "string",
                      "description": "The family (last) name of this user."
                    },
                    "middle": {
                      "type": "string",
                      "description": "The middle name of this user."
                    },
                    "other": {
                      "type": "string",
                      "description": "The other name (nickname) of this user."
                    },
                    "suffix": {
                      "type": "string",
                      "description": "The suffix of this user's name.  Examples: Jr., III, PhD."
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of this user.  Examples: Mr., Ms., Dr."
                    }
                  },
                  "required": [
                    "family",
                    "given"
                  ]
                },
                "job": {
                  "type": "object",
                  "description": "The user's job information.",
                  "title": "Job",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The user's job title."
                    },
                    "department": {
                      "type": "string",
                      "description": "The department the user belongs to."
                    },
                    "company": {
                      "type": "string",
                      "description": "The company the user works for."
                    }
                  }
                },
                "contact": {
                  "type": "object",
                  "description": "The user's contact information.",
                  "title": "Contact",
                  "properties": {
                    "homePhone": {
                      "type": "string",
                      "description": "The user's home phone number."
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "The user's mobile phone number."
                    },
                    "businessPhone": {
                      "type": "string",
                      "description": "The user's business phone number."
                    },
                    "businessFax": {
                      "type": "string",
                      "description": "The user's business fax number."
                    },
                    "email": {
                      "type": "string",
                      "description": "The user's email address."
                    },
                    "webPage": {
                      "type": "string",
                      "description": "The URL of the user's personal website."
                    }
                  }
                },
                "address": {
                  "type": "object",
                  "description": "The user's mailing address.",
                  "title": "Address",
                  "properties": {
                    "street1": {
                      "type": "string",
                      "description": "The street address of the user."
                    },
                    "street2": {
                      "type": "string",
                      "description": "An additional field to store the street address of the user."
                    },
                    "city": {
                      "type": "string",
                      "description": "The city the user resides in."
                    },
                    "state": {
                      "type": "string",
                      "description": "The state or province the user resides in."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The zip code or postal code the user resides in."
                    },
                    "country": {
                      "type": "string",
                      "description": "The country the user resides in."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "The user's localization settings.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
                    },
                    "calendar": {
                      "type": "string",
                      "description": "The calendar type specified by the user.",
                      "enum": [
                        "Gregorian",
                        "GregorianHijri",
                        "Hijri",
                        "HijriGregorian"
                      ]
                    },
                    "firstDayOfWeek": {
                      "type": "string",
                      "description": "The user's preferred first day of the week.",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Saturday"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "An error occurred while creating the new user",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The currently authenticated user has insufficient privileges to create a new user",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A user with the same userName or externalId already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User",
        "description": "Loads a user.\n\nProperties returned will depend on the caller's entitlements.\n\nCallers with the entitlement 'user.VIEW' will always get a minimal set of core properties:\n\n- id\n- name.given\n- name.family\n- name.middle\n- systemRoleIds\n\nDepending on the Learn administrator customizable user field display settings, as well as the target user's personal visibility settings, the following fields might also be included:\n\n- userName\n- educationLevel\n- gender\n- birthDate\n- name.other\n- name.suffix\n- name.title\n- job.*\n- contact.*\n- address.*\n\nCallers asking for their own user record get all fields listed above, plus:\n\n- locale.*\n\nAll user properties are provided to callers with one of the entitlements 'system.user.properties.MODIFY', 'system.useradmin.generic.VIEW', or 'system.user.VIEW'.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The id is invalid or not properly formatted",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to view the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "Deletes a user.\n\nThe 'system.user.DELETE' entitlement is needed.\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid userid provided",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "The user is not authorized to delete the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update User",
        "description": "Updates a user.\n\nCallers may update their own user record if they have the 'self.user.MODIFY' entitlement.  Updating other users requires the 'system.user.properties.MODIFY' entitlement.\n\nCertain properties may be edited by callers with more finely grained entitlements: \n\n | Field                  | Entitlements Required                               |\n |------------------------|-----------------------------------------------------|\n | systemRoleIds          | system.user.MODIFY, system.user-system-role.MODIFY  |\n | availability.available | system.user.MODIFY, system.user.availability.MODIFY |\n | password               | system.user.MODIFY, system.user-password.MODIFY     |\n \n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'."
                },
                "dataSourceId": {
                  "type": "string",
                  "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
                },
                "userName": {
                  "type": "string",
                  "description": "The userName property, shown in the UI."
                },
                "studentId": {
                  "type": "string",
                  "description": "The user's student ID name or number as defined by the school or institution."
                },
                "password": {
                  "type": "string",
                  "description": "The user's login password."
                },
                "educationLevel": {
                  "type": "string",
                  "description": "The education level of this user.",
                  "enum": [
                    "K8",
                    "HighSchool",
                    "Freshman",
                    "Sophomore",
                    "Junior",
                    "Senior",
                    "GraduateSchool",
                    "PostGraduateSchool",
                    "Unknown"
                  ]
                },
                "gender": {
                  "type": "string",
                  "description": "The gender of this user.",
                  "enum": [
                    "Female",
                    "Male",
                    "Unknown"
                  ]
                },
                "birthDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The birth date of this user."
                },
                "systemRoleIds": {
                  "type": "array",
                  "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
                  "items": {
                    "$ref": "#/definitions/SystemRoleEnum"
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the user account.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the user is available within the system. Unavailable users cannot log in.",
                      "enum": [
                        "Yes",
                        "No",
                        "Disabled"
                      ]
                    }
                  }
                },
                "name": {
                  "type": "object",
                  "description": "Properties used to build the user's display name.",
                  "title": "Name",
                  "properties": {
                    "given": {
                      "type": "string",
                      "description": "The given (first) name of this user."
                    },
                    "family": {
                      "type": "string",
                      "description": "The family (last) name of this user."
                    },
                    "middle": {
                      "type": "string",
                      "description": "The middle name of this user."
                    },
                    "other": {
                      "type": "string",
                      "description": "The other name (nickname) of this user."
                    },
                    "suffix": {
                      "type": "string",
                      "description": "The suffix of this user's name.  Examples: Jr., III, PhD."
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of this user.  Examples: Mr., Ms., Dr."
                    }
                  }
                },
                "job": {
                  "type": "object",
                  "description": "The user's job information.",
                  "title": "Job",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The user's job title."
                    },
                    "department": {
                      "type": "string",
                      "description": "The department the user belongs to."
                    },
                    "company": {
                      "type": "string",
                      "description": "The company the user works for."
                    }
                  }
                },
                "contact": {
                  "type": "object",
                  "description": "The user's contact information.",
                  "title": "Contact",
                  "properties": {
                    "homePhone": {
                      "type": "string",
                      "description": "The user's home phone number."
                    },
                    "mobilePhone": {
                      "type": "string",
                      "description": "The user's mobile phone number."
                    },
                    "businessPhone": {
                      "type": "string",
                      "description": "The user's business phone number."
                    },
                    "businessFax": {
                      "type": "string",
                      "description": "The user's business fax number."
                    },
                    "email": {
                      "type": "string",
                      "description": "The user's email address."
                    },
                    "webPage": {
                      "type": "string",
                      "description": "The URL of the user's personal website."
                    }
                  }
                },
                "address": {
                  "type": "object",
                  "description": "The user's mailing address.",
                  "title": "Address",
                  "properties": {
                    "street1": {
                      "type": "string",
                      "description": "The street address of the user."
                    },
                    "street2": {
                      "type": "string",
                      "description": "An additional field to store the street address of the user."
                    },
                    "city": {
                      "type": "string",
                      "description": "The city the user resides in."
                    },
                    "state": {
                      "type": "string",
                      "description": "The state or province the user resides in."
                    },
                    "zipCode": {
                      "type": "string",
                      "description": "The zip code or postal code the user resides in."
                    },
                    "country": {
                      "type": "string",
                      "description": "The country the user resides in."
                    }
                  }
                },
                "locale": {
                  "type": "object",
                  "description": "The user's localization settings.",
                  "title": "Locale",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
                    },
                    "calendar": {
                      "type": "string",
                      "description": "The calendar type specified by the user.",
                      "enum": [
                        "Gregorian",
                        "GregorianHijri",
                        "Hijri",
                        "HijriGregorian"
                      ]
                    },
                    "firstDayOfWeek": {
                      "type": "string",
                      "description": "The user's preferred first day of the week.",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Saturday"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The request did not specify correct parameters",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "The user is not authorized to update the specified User object",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The user is not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "A user with the same username or batchUid already exists",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/users/{userId}/courses": {
      "get": {
        "tags": [
          "course memberships"
        ],
        "summary": "Get Memberships",
        "description": "Returns a list of course and organization memberships for the specified user.\n\nUsers can always view their own memberships.  Callers viewing the memberships of another user require at least one of the following entitlements:\n\n- 'system.user.course.enrollment.VIEW' allows callers to see course memberships\n- 'system.user.org.enrollment.VIEW' allows callers to see organization memberships\n\n**Since**: 2015.11.0",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "created",
            "in": "query",
            "description": "Search for memberships with a created date relative to this value.  'createdCompare' may also be sent to control search behavior.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "createdCompare",
            "in": "query",
            "description": "Used alongside the 'created' search parameter.  Supported values:\n\n- lessThan\n- greaterOrEqual\n\nDefaults to greaterOrEqual if not specified.\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string",
            "enum": [
              "lessThan",
              "greaterOrEqual"
            ]
          },
          {
            "name": "dataSourceId",
            "in": "query",
            "description": "Search for memberships with this dataSourceId.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Membership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Columns",
        "description": "Returns a list of grade columns.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade columns if they are enrolled in the course, and the mygrade tool is available in the course, and the columns are visible to the student. Observers may view grade columns if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- description\n- externalGrade\n- contentId\n- score.possible\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n\n**Since**: 3000.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "contentId",
            "in": "query",
            "description": "Search for grade columns associated with this content item.\n\n**Since**: 3000.11.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GradeColumn"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course grades"
        ],
        "summary": "Create Grade Column",
        "description": "Create a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "grading",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "format": "double",
                      "description": "The points possible for this grade column."
                    },
                    "decimalPlaces": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Decimal place precision used to display scores for this grade column."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of Grading settings for this Grade Column; Manual, Calculated, or Attempts based.",
                      "enum": [
                        "Attempts",
                        "Calculated",
                        "Manual"
                      ]
                    },
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column; None, Date based, or AfterAllGraded",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "anonymousGrading",
                    "type"
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Grade Column",
        "description": "Loads a specific grade column.\n\nThe entitlement \"course.gradebook.MODIFY\" is needed. Alternatively, student users may view the grade column if they are enrolled in the course, and the mygrade tool is available in the course, and the column is visible to the student. Observers may view the grade column if course access is allowed for observers and the associated observee is a student that satisfies all conditions required by a student user to view grade columns.\n\nStudent or observer users may view a limited subset of grade column fields:\n\n- id\n- name\n- description\n- externalGrade\n- contentId\n- score.possible\n- grading.type\n- grading.due\n- grading.attemptsAllowed\n- grading.scoringModel\n\n**Since**: 3000.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course grades"
        ],
        "summary": "Delete Grade Column",
        "description": "Delete a specific grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "name": "onlyIfEmpty",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Insufficient Permission to delete the requested resource",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Requested resource could not be found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict in deleting this grade column due to associated grades",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Grade Column",
        "description": "Update a manual grade column. The entitlement \"course.gradebook.MODIFY\" is needed.\n\n**Since**: 3000.7.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "The externalId for this grade column"
                },
                "name": {
                  "type": "string",
                  "description": "The name of the grade column."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the grade column."
                },
                "externalGrade": {
                  "type": "boolean",
                  "description": "Whether this grade column is an external grade column."
                },
                "score": {
                  "type": "object",
                  "description": "Settings controlling the numerical scoring of this grade column.",
                  "title": "Score",
                  "properties": {
                    "possible": {
                      "type": "number",
                      "format": "double",
                      "description": "The points possible for this grade column."
                    },
                    "decimalPlaces": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Decimal place precision used to display scores for this grade column."
                    }
                  }
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling the availability/visibility of grade column data.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether this grade column is available to students",
                      "enum": [
                        "Yes",
                        "No"
                      ]
                    }
                  }
                },
                "grading": {
                  "type": "object",
                  "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
                  "title": "Grading",
                  "properties": {
                    "due": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date on which attempts are due for the grade column."
                    },
                    "attemptsAllowed": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of attempts allowed for the grade column."
                    },
                    "scoringModel": {
                      "type": "string",
                      "description": "The scoring model for the submitted grade column attempts.",
                      "enum": [
                        "Last",
                        "Highest",
                        "Lowest",
                        "First",
                        "Average"
                      ]
                    },
                    "anonymousGrading": {
                      "type": "object",
                      "description": "Settings for anonymous grading",
                      "title": "AnonymousGrading",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The type of AnonymousGrading settings for this Attempts based Grade Column; None, Date based, or AfterAllGraded",
                          "enum": [
                            "None",
                            "AfterAllGraded",
                            "Date"
                          ]
                        },
                        "releaseAfter": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GradeColumn"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/attempts": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Attempts",
        "description": "Returns a list of attempts associated with the specified grade column.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view column attempts. Alternatively, if the 'userId' query parameter is specified, and the user making the request matches the specified 'userId', then the user may view his/her own attempt.  When querying an anonymous grade column, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned column attempts.  If the release criteria has not been met and the 'userId' query parameter is specified, a 403 response is returned, unless the requesting user matches the specified 'userId' value.\n\nA subset of attempt properties are available to a student when requesting his or her own attempts:\n\n- id\n- userId\n- groupAttemptId\n- status\n- text\n- score\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visbile to the API Gateway User.\n\n**Since**: 3100.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Search for grade column attempts submitted by this user. This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n \n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string"
          },
          {
            "name": "attemptStatuses",
            "in": "query",
            "description": "Search for grade column attempts with one of these statuses.  Possible values are:\n\n- InProgress - attempt activity has commenced, but has not been submitted for grading\n- NeedsGrading - attempt has been submitted for grading, but has not been fully graded\n- Completed - a grade has been entered for the attempt\n- InProgressAgain - attempt has been graded, but more student activity occurred after the grade was entered;                       applies only to collaborative tools such as discussions\n- NeedsGradingAgain - additional student activity occurring after a grade was entered requires that the attempt                         be regraded; applies only to collaborative tools such as discussions\n\n**Since**: 3100.4.0",
            "required": false,
            "type": "string",
            "enum": [
              "NotAttempted",
              "Abandoned",
              "InProgress",
              "Suspended",
              "Canceled",
              "NeedsGrading",
              "Completed",
              "InMoreProgress",
              "NeedsMoreGrading"
            ]
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Attempt"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/attempts/{attemptId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Attempt",
        "description": "Loads the grade column attempt for the specified id.\n\nThe 'course.gradebook.MODIFY' entitlement is needed to view an attempt. Alternatively, if the user making the request is also the user associated with the attempt grade, then the user may view his/her own attempt.  When accessing an anonymous grade column attempt, if the release criteria has not yet been met, then the 'userId' attribute will not be populated for the returned attempt.\n\nA subset of attempt properties are available to a student when requesting his or her own attempt:\n\n- id\n- userId\n- groupAttemptId\n- status\n- text\n- score\n- groupOverride\n- feedback\n- studentComments\n- studentSubmission\n- exempt\n- created\nWhen this endpoint is called by the API Gateway User, the response will only contain attributes visible to a Grader. If an Attempt is InProgress, then a Student's submission & comments would not be visible to the API Gateway User. If an Attempt is NeedsGrading, then a Student's submission & comments are visbile to the API Gateway User.\n\n**Since**: 3100.4.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "name": "attemptId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Attempt"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Grades",
        "description": "Returns a list of grades associated with the specified grade column.  This operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Grade"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "403": {
            "description": "Access Denied",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/columns/{columnId}/users/{userId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get Column Grade",
        "description": "Loads the grade column grade for a specific user.  If grade details have yet to be entered for the specified user, then no grade details will be included in the returned grade object.  This operation does not include 'ReadyToPost' grades when returning grade details for calculated grade columns.\n\nUsers with entitlement 'course.gradebook.MODIFY' can retrieve grades for any or all enrolled users. Requests for grades in a columns whose attempts are not visible to instructors will return with a status of \"403 - Forbidden.\"\n\nEnrolled users without the 'course.gradebook.MODIFY' entitlement may only view their own grade; such users cannot retrieve grades of other users.  A request for the grade in a columns that has been hidden from students in the gradebook will return with a status \"403 - Forbidden.\".  A subset of grade properties are available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course grades"
        ],
        "summary": "Update Column Grade",
        "description": "Update the grade column grade for a specific user, including the text grade, score, instructor notes and feedback, and exempt status.  When updating text grade or score, the resulting grade is always marked as 'Posted'.  This end-point, currently, does not support marking the grade as 'ReadyToPost'.  Grade overrides may be cleared by either specifying the 'score' attribute as null, or the 'text'; attribute as null, '', or '-' in the body of the request. The entitlement 'course.gradebook.MODIFY' is required to perform this operation.\n\n**Since**: 3000.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/columnId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "in": "body",
            "name": "input",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "The the text representation of this grade."
                },
                "score": {
                  "type": "number",
                  "format": "double",
                  "description": "The the score associated with this grade."
                },
                "notes": {
                  "type": "string",
                  "description": "The instructor notes associated with this grade."
                },
                "feedback": {
                  "type": "string",
                  "description": "The instructor feedback associated with this grade."
                },
                "exempt": {
                  "type": "boolean",
                  "description": "Whether the score associated with this grade is ignored when computing the course grade."
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Grade"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Grade detail values have not yet been populated",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/gradebook/users/{userId}": {
      "get": {
        "tags": [
          "course grades"
        ],
        "summary": "Get User Grades",
        "description": "Loads the course grades for a specific user.\n\nUsers with entitlement \"course.gradebook.MODIFY\" have read access to all the properties of the collection results.\n\nUsers without entitlement \"course.gradebook.MODIFY\" requesting grades for themselves (i.e., userId = current user id) have read access to a restricted subset of properties of the collections result. These are the properties available to a student when requesting his or her own grades:\n\n- userId\n- columnId\n- status\n- text\n- score\n- exempt\n- feedback\n\n**Since**: 3000.3.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Grade"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Groups",
        "description": "Returns a list of group objects for the specified course or organization.\n\nCallers not enrolled in the course must have at least one of the following entitlements:\n\n- 'course.VIEW'\n- 'system.course.VIEW'\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \"(desc)\" suffix to request a descending sort for that property. e.g. \"name.family(desc),created\"\n\n**Since**: 3100.0.0",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "course groups"
        ],
        "summary": "Create Group",
        "description": "Creates a group in the specified course.\n\nMinimal entitlements required:\n\n- course.group.CREATE\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "externalId",
                "name"
              ],
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to a random UUID."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The description of the group. This field supports BbML."
                },
                "parentId": {
                  "type": "string",
                  "description": "The primary ID of the group's parent groupset."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.",
                      "enum": [
                        "InstructorOnly",
                        "SelfEnrollment"
                      ]
                    },
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "description": "The description of the signup sheet This field supports BbML."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}": {
      "get": {
        "tags": [
          "course groups"
        ],
        "summary": "Get Group",
        "description": "Loads a group in the specified course.\n\nEntitlement and field visibility rules are the same as those when loading the groups collection.\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course groups"
        ],
        "summary": "Delete Group",
        "description": "Deletes a group from the specified course.\n\nRequired entitlements:\n\n- course.group.DELETE\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "course groups"
        ],
        "summary": "Update Group",
        "description": "Updates a group in the specified course.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3100.5.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "in": "body",
            "name": "input",
            "description": "JSON input object.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "externalId": {
                  "type": "string",
                  "description": "An optional externally-defined unique ID for the course. Defaults to a random UUID."
                },
                "name": {
                  "type": "string",
                  "description": "The title of the group."
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The description of the group. This field supports BbML."
                },
                "parentId": {
                  "type": "string",
                  "description": "The primary ID of the group's parent groupset."
                },
                "availability": {
                  "type": "object",
                  "description": "Settings controlling availability of the group to students.",
                  "title": "Availability",
                  "properties": {
                    "available": {
                      "type": "string",
                      "description": "Whether the Group is currently available to students.",
                      "enum": [
                        "Yes",
                        "No",
                        "SignupOnly"
                      ]
                    }
                  }
                },
                "enrollment": {
                  "type": "object",
                  "description": "Settings controlling enrollment of the group to students.",
                  "title": "Enrollment",
                  "properties": {
                    "limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The maximum allowed enrollment size for self enrolled groups."
                    },
                    "signupSheet": {
                      "type": "object",
                      "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
                      "title": "SignupSheet",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the signup sheet"
                        },
                        "description": {
                          "type": "string",
                          "format": "BbML",
                          "description": "The description of the signup sheet This field supports BbML."
                        },
                        "showMembers": {
                          "type": "boolean",
                          "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}/users": {
      "get": {
        "tags": [
          "course group users"
        ],
        "summary": "Get Group Memberships",
        "description": "Returns a list of group memberships objects for the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3100.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupMembership"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/courses/{courseId}/groups/{groupId}/users/{userId}": {
      "get": {
        "tags": [
          "course group users"
        ],
        "summary": "Get Group Membership",
        "description": "Loads a group membership in the specified group.\n\nCallers not enrolled in the group must have at least one of the following entitlements:\n\n- course.group.VIEW\n\n**Since**: 3100.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "course group users"
        ],
        "summary": "Put Group Membership",
        "description": "Creates a group membership in the specified group.\n\nMinimal entitlements required:\n\n- course.group.MODIFY\n\n**Since**: 3100.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GroupMembership"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "course group users"
        ],
        "summary": "Delete Group Membership",
        "description": "Deletes a group from the specified course.\n\nRequired entitlements:\n\n- course.group.MODIFY\n\n**Since**: 3100.6.0",
        "parameters": [
          {
            "$ref": "#/parameters/courseId"
          },
          {
            "$ref": "#/parameters/groupId"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/learn/api/public/v1/logs/sis/dataSets/{id}": {
      "get": {
        "tags": [
          "SIS Logs"
        ],
        "summary": "Get SIS Logs By Data Set Uid",
        "description": "\n\nReturns a list of SIS Integration logs. Users with 'system.dataintegrations.log.VIEW' entitlement can view these logs. </p> </p> NOTE: If integration is processing the feed file then 423 (LOCKED) will be returned as response.\n\n**Since**: 3200.0.1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": ": dataSetUid of the integration",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/level"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "results": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/SISLogEntry"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/PagingInfo"
                }
              },
              "required": [
                "results"
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "423": {
            "description": "Locked",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "OAuth2AccessToken": {
      "type": "object",
      "required": [
        "expires_in"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "description": "The access token issued by the authorization server."
        },
        "token_type": {
          "type": "string",
          "description": "The type of the token issued.  Value is case insensitive."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "The lifetime in seconds of the access token."
        },
        "refresh_token": {
          "type": "string",
          "description": "The refresh token issued by the authorization server during OAuth2 authorization code workflow if 'offline' scope was granted."
        },
        "scope": {
          "type": "string",
          "description": "The scope of the access granted by this token."
        },
        "user_id": {
          "type": "string",
          "description": "The ID of the user granted access via token"
        }
      }
    },
    "OAuth2Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "description": "Error code indicating high level source of error",
          "enum": [
            "invalid_request",
            "invalid_client",
            "invalid_grant",
            "unauthorized_client",
            "unsupported_grant_type",
            "invalid_scope",
            "unsupported_response_type",
            "server_error"
          ]
        },
        "error_description": {
          "type": "string",
          "description": "Optional text providing additional information about the error condition."
        }
      }
    },
    "Announcement": {
      "type": "object",
      "required": [
        "id",
        "title"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Primary key identifier",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "description": "The title of this System Announcement."
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "description": "The message body of the System Announcement. This field supports BbML."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course to students.",
          "title": "Availability",
          "properties": {
            "duration": {
              "type": "object",
              "description": "Duration indicates when the System Announcement is Available based on whether it is Permanent or if the date/time of the request falls within its Start & End dates.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Indicates whether this System Announcement is always displayed (Permanent) or if it is shown only between the Start and End dates (Restricted).",
                  "enum": [
                    "Permanent",
                    "Restricted"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement starts being Available."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this Announcement stops being Available."
                }
              }
            }
          }
        },
        "showAtLogin": {
          "type": "boolean",
          "description": "Whether this System Announcement should be displayed on the login page."
        },
        "showInCourses": {
          "type": "boolean",
          "description": "Whether this System Announcement should be displayed on courses."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date that the System Announcement was created."
        }
      }
    },
    "Content": {
      "type": "object",
      "required": [
        "created",
        "hasAssociatedGroups",
        "hasChildren",
        "hasGradebookColumns",
        "id",
        "title"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the content.",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The ID of the content's parent.  Note that top-level contents do not have parents. The 'parentId' field is a writable field as of the Bb Learn 3200.6.0 release.  Specifying a new value in PATCH requests allows the Content object to be moved from one parent to another."
        },
        "title": {
          "type": "string",
          "description": "The title or name of this content. Typically shown as the main text to click in the course outline when accessing the content."
        },
        "body": {
          "type": "string",
          "format": "BbML",
          "description": "The body text associated with this content. This field supports BbML."
        },
        "description": {
          "type": "string",
          "description": "The short description of this content.\n\nThis field is not used in Classic courses.  For Ultra courses this is used to show information directly on the course outline."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this content was created.",
          "readOnly": true
        },
        "position": {
          "type": "integer",
          "format": "int32",
          "description": "The position of this content within its parent folder."
        },
        "hasChildren": {
          "type": "boolean",
          "description": "Indicates whether this content is allowed to have child content items.",
          "readOnly": true
        },
        "hasGradebookColumns": {
          "type": "boolean",
          "description": "Indicates whether this content item has one or more gradebook columns.\n\nAssociated gradebook columns can be accessed via /learn/api/public/v1/courses/$courseId/gradebook/columns?contentId=$contentId\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "hasAssociatedGroups": {
          "type": "boolean",
          "description": "Indicates whether this content item has one or more associated groups.\n\nAssociated groups can be accessed via /learn/api/public/v1/courses/$courseId/contents/$contentId/groups\n\n**Since**: 3100.4.0",
          "readOnly": true
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the content to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the content is currently available to students.  Instructors can always access the content.  If set to 'PartiallyVisible', the title will be available to students but the body will not.",
              "enum": [
                "Yes",
                "No",
                "PartiallyVisible"
              ]
            },
            "allowGuests": {
              "type": "boolean",
              "description": "Whether this content is available to users with the 'guest' role."
            },
            "adaptiveRelease": {
              "type": "object",
              "description": "Settings controlling adaptive release of the content to students.",
              "title": "AdaptiveRelease",
              "properties": {
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date when this content will become available to students."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date when this content will no longer be available to students."
                }
              }
            }
          }
        },
        "contentHandler": {
          "$ref": "#/definitions/ContentHandler"
        }
      }
    },
    "ContentGroup": {
      "type": "object",
      "required": [
        "contentId",
        "groupId"
      ],
      "properties": {
        "contentId": {
          "type": "string",
          "description": "The ID of the associated content.",
          "readOnly": true
        },
        "groupId": {
          "type": "string",
          "description": "The ID of the association of content and group.",
          "readOnly": true
        }
      }
    },
    "ContentHandler": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The content handler's ID.\n\nPublicly supported handlers: \n\n | ID                           | Documentation         | Since     |\n |------------------------------|-----------------------|-----------|\n | resource/x-bb-document       | ContentItemTOPubV1    |  3000.1.0 |\n | resource/x-bb-externallink   | ExternalLinkTOPubV1   |  3000.1.0 |\n | resource/x-bb-folder         | ContentFolderTOPubV1  |  3000.1.0 |\n | resource/x-bb-courselink     | CourseLinkTOPubV1     |  3100.5.0 |\n | resource/x-bb-forumlink      | DiscussionLinkTOPubV1 |  3100.6.0 |\n | resource/x-bb-blti-link      | BasicLTITOPubV1       |  3200.6.0 |\n | resource/x-bb-file           | ContentFileTOPubV1    |  3200.6.0 |\n \n\nFor handlers that are not publicly supported yet, their ID will be shown here, and updates to common content attributes are allowed, but extended handler-specific attributes will not be visible.",
          "readOnly": true
        }
      }
    },
    "Course": {
      "type": "object",
      "required": [
        "courseId",
        "created",
        "externalAccessUrl",
        "guestAccessUrl",
        "hasChildren",
        "id",
        "name",
        "organization",
        "parentId",
        "uuid"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the course.  Used by LTI launches and other inter-server operations.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the course.  Defaults to the courseId.\n\nFormerly known as 'batchUid'."
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "courseId": {
          "type": "string",
          "description": "The Course ID attribute, shown to users in the UI.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the course."
        },
        "description": {
          "type": "string",
          "description": "The description of the course."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course was created.",
          "readOnly": true
        },
        "organization": {
          "type": "boolean",
          "description": "Whether this object represents an Organization.  Defaults to false.",
          "readOnly": true
        },
        "ultraStatus": {
          "type": "string",
          "description": "Whether the course is rendered using Classic or Ultra Course View.",
          "enum": [
            "Undecided",
            "Classic",
            "Ultra",
            "UltraPreview"
          ]
        },
        "allowGuests": {
          "type": "boolean",
          "description": "Whether guests (users with the role guest) are allowed access to the course.  Defaults to true."
        },
        "readOnly": {
          "type": "boolean",
          "description": "Whether the course is closed to any further changes. This status does not affect availability of the course for viewing in any way, just updates. readOnly is only valid in an Ultra course; Classic courses can not be closed."
        },
        "termId": {
          "type": "string",
          "description": "The ID of the term associated to this course.  This may optionally be the term's externalId using the syntax \"externalId:spring.2016\"."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the course is currently available to students.  Instructors can always access the course.  If set to 'Term', the course's parent term availability settings will be used.",
              "enum": [
                "Yes",
                "No",
                "Disabled",
                "Term"
              ]
            },
            "duration": {
              "type": "object",
              "description": "Settings controlling the length of time the course is available.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intended length of the course.  Possible values are:\n\n- Continuous: The course is active on an ongoing basis.  This is the default.\n- DateRange: The course will only be available between specific date ranges.\n- FixedNumDays: The course will only be available for a set number of days.\n- Term: The course's parent term duration settings will be used.",
                  "enum": [
                    "Continuous",
                    "DateRange",
                    "FixedNumDays",
                    "Term"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course starts.  May only be set if availability.duration.type is DateRange."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this course ends.  May only be set if availability.duration.type is DateRange."
                },
                "daysOfUse": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of days this course can be used.  May only be set if availability.duration.type is FixedNumDays."
                }
              }
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling how students may enroll in the course.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Specifies the enrollment options for the course.  Defaults to InstructorLed.",
              "enum": [
                "InstructorLed",
                "SelfEnrollment",
                "EmailEnrollment"
              ]
            },
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollments are allowed for the course.  May only be set if enrollment.type is SelfEnrollment."
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which enrollment in this course ends.  May only be set if enrollment.type is SelfEnrollment."
            },
            "accessCode": {
              "type": "string",
              "description": "The enrollment access code associated with this course.  May only be set if enrollment.type is SelfEnrollment."
            }
          }
        },
        "locale": {
          "type": "object",
          "description": "Settings controlling localization within the course.",
          "title": "Locale",
          "properties": {
            "id": {
              "type": "string",
              "description": "The locale of this course."
            },
            "force": {
              "type": "boolean",
              "description": "Whether students are forced to use the course's specified locale."
            }
          }
        },
        "hasChildren": {
          "type": "boolean",
          "description": "Whether the course has any cross-listed children.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "parentId": {
          "type": "string",
          "description": "The cross-listed parentId associated with the course, if the course is a child course.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "externalAccessUrl": {
          "type": "string",
          "readOnly": true
        },
        "guestAccessUrl": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CourseChild": {
      "type": "object",
      "required": [
        "created",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the child course associated with this cross-listing.",
          "readOnly": true
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course cross-listing.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this course cross-listing was created.",
          "readOnly": true
        }
      }
    },
    "DataSource": {
      "type": "object",
      "required": [
        "externalId",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the data source.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the data source.\n\nFormerly known as 'batchUid'."
        },
        "description": {
          "type": "string",
          "description": "The description of the data source."
        }
      }
    },
    "FileAttachment": {
      "type": "object",
      "required": [
        "fileName",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Membership": {
      "type": "object",
      "required": [
        "childCourseId",
        "courseId",
        "created",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "courseId": {
          "type": "string",
          "description": "The primary ID of the course.",
          "readOnly": true
        },
        "childCourseId": {
          "type": "string",
          "description": "The primary ID of the child, cross-listed course, in which the user is directly enrolled.\n\n**Since**: 3000.11.0",
          "readOnly": true
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this membership was created.",
          "readOnly": true
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the course membership.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the membership is available in the course. If the membership is not available, the associated user is considered inactive in the course.",
              "enum": [
                "Yes",
                "No",
                "Disabled"
              ]
            }
          }
        },
        "courseRoleId": {
          "type": "string",
          "description": "The user's role in the course.\n\nLearn provides the following immutable course roles:\n\n- Student: Has no access to the Control Panel.  This is the default role.\n- Guest: Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards.\nOut of the box, Learn also comes with the following roles, although they are customizable and may have different capabilities from what is documented here:\n\n- Instructor: Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students.\n- TeachingAssistant: The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school.\n- CourseBuilder: Manages the course without having access to student grades.\n- Grader: Assists the instructor in the creation, management, delivery, and grading of items.\nThese roles are also valid for an organization, although they are named differently in the UI.\n\nCustom course roles may also be referenced by their IDs.",
          "enum": [
            "Instructor",
            "TeachingAssistant",
            "CourseBuilder",
            "Grader",
            "Student",
            "Guest"
          ]
        }
      }
    },
    "PagingInfo": {
      "type": "object",
      "properties": {
        "nextPage": {
          "type": "string",
          "description": "The URL to use to navigate to the next page of results.  This field may be omitted when there is no additional data available."
        }
      }
    },
    "RestException": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Represents HTTP Status code in the response header."
        },
        "code": {
          "type": "string",
          "description": "The error code specific to a particular REST API. It is usually something that conveys information specific to the problem domain. For cases where the HTTP Status code conveys all the information required (such as a 404-Not Found) then the code may be omitted."
        },
        "message": {
          "type": "string",
          "description": "Error message that should be easy to understand and convey a concise reason as to why the error occurred"
        },
        "developerMessage": {
          "type": "string",
          "description": "Represents any technical information that a developer calling REST API might find useful."
        },
        "extraInfo": {
          "type": "string",
          "description": "Indicates a URL that anyone seeing the error message can click in a browser. The target web page should describe the error condition fully, as well as potential solutions to help them resolve the error condition"
        }
      }
    },
    "SystemRoleEnum": {
      "type": "string",
      "properties": {},
      "enum": [
        "SystemAdmin",
        "SystemSupport",
        "CourseCreator",
        "CourseSupport",
        "AccountAdmin",
        "Guest",
        "User",
        "Observer",
        "Integration",
        "Portal"
      ]
    },
    "Term": {
      "type": "object",
      "required": [
        "externalId",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the term.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An externally-defined unique ID for the term.\n\nFormerly known as 'sourcedidId'."
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this term.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "name": {
          "type": "string",
          "description": "The name of the term."
        },
        "description": {
          "type": "string",
          "format": "BbML",
          "description": "The description of the term. This field supports BbML."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the term to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the term and the courses it contains are available to students.  Instructors can always access their courses.",
              "enum": [
                "Yes",
                "No"
              ]
            },
            "duration": {
              "type": "object",
              "description": "Settings controlling the length of time the term is available.",
              "title": "Duration",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The intended length of the term.  Possible values are:\n\n- Continuous: The term is active on an ongoing basis.  This is the default.\n- DateRange: The term will only be available between specific date ranges.\n- FixedNumDays: The term will only be available for a set number of days.",
                  "enum": [
                    "Continuous",
                    "DateRange",
                    "FixedNumDays"
                  ]
                },
                "start": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this term starts.  May only be set if availability.duration.type is DateRange."
                },
                "end": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The date this term ends.  May only be set if availability.duration.type is DateRange."
                },
                "daysOfUse": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The number of days courses within this term can be used.  May only be set if availability.duration.type is FixedNumDays."
                }
              }
            }
          }
        }
      }
    },
    "UploadedFileInfo": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "created",
        "id",
        "lastLogin",
        "name",
        "userName",
        "uuid"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the user.",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "A secondary unique ID for the user.  Used by LTI launches and other inter-server operations.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the user.  Defaults to the userName.\n\nFormerly known as 'batchUid'."
        },
        "dataSourceId": {
          "type": "string",
          "description": "The ID of the data source associated with this user.  This may optionally be the data source's externalId using the syntax \"externalId:math101\"."
        },
        "userName": {
          "type": "string",
          "description": "The userName property, shown in the UI."
        },
        "studentId": {
          "type": "string",
          "description": "The user's student ID name or number as defined by the school or institution."
        },
        "educationLevel": {
          "type": "string",
          "description": "The education level of this user.",
          "enum": [
            "K8",
            "HighSchool",
            "Freshman",
            "Sophomore",
            "Junior",
            "Senior",
            "GraduateSchool",
            "PostGraduateSchool",
            "Unknown"
          ]
        },
        "gender": {
          "type": "string",
          "description": "The gender of this user.",
          "enum": [
            "Female",
            "Male",
            "Unknown"
          ]
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "description": "The birth date of this user."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this user was created.",
          "readOnly": true
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time",
          "description": "The date this user last logged in.",
          "readOnly": true
        },
        "systemRoleIds": {
          "type": "array",
          "description": "The system roles (the administrative user roles in the UI) for this user.  The first role in this list is the user's primary system role, while the remaining are secondary system roles.",
          "items": {
            "$ref": "#/definitions/SystemRoleEnum"
          }
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the user account.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the user is available within the system. Unavailable users cannot log in.",
              "enum": [
                "Yes",
                "No",
                "Disabled"
              ]
            }
          }
        },
        "name": {
          "type": "object",
          "description": "Properties used to build the user's display name.",
          "title": "Name",
          "properties": {
            "given": {
              "type": "string",
              "description": "The given (first) name of this user."
            },
            "family": {
              "type": "string",
              "description": "The family (last) name of this user."
            },
            "middle": {
              "type": "string",
              "description": "The middle name of this user."
            },
            "other": {
              "type": "string",
              "description": "The other name (nickname) of this user."
            },
            "suffix": {
              "type": "string",
              "description": "The suffix of this user's name.  Examples: Jr., III, PhD."
            },
            "title": {
              "type": "string",
              "description": "The title of this user.  Examples: Mr., Ms., Dr."
            }
          },
          "required": [
            "family",
            "given"
          ]
        },
        "job": {
          "type": "object",
          "description": "The user's job information.",
          "title": "Job",
          "properties": {
            "title": {
              "type": "string",
              "description": "The user's job title."
            },
            "department": {
              "type": "string",
              "description": "The department the user belongs to."
            },
            "company": {
              "type": "string",
              "description": "The company the user works for."
            }
          }
        },
        "contact": {
          "type": "object",
          "description": "The user's contact information.",
          "title": "Contact",
          "properties": {
            "homePhone": {
              "type": "string",
              "description": "The user's home phone number."
            },
            "mobilePhone": {
              "type": "string",
              "description": "The user's mobile phone number."
            },
            "businessPhone": {
              "type": "string",
              "description": "The user's business phone number."
            },
            "businessFax": {
              "type": "string",
              "description": "The user's business fax number."
            },
            "email": {
              "type": "string",
              "description": "The user's email address."
            },
            "webPage": {
              "type": "string",
              "description": "The URL of the user's personal website."
            }
          }
        },
        "address": {
          "type": "object",
          "description": "The user's mailing address.",
          "title": "Address",
          "properties": {
            "street1": {
              "type": "string",
              "description": "The street address of the user."
            },
            "street2": {
              "type": "string",
              "description": "An additional field to store the street address of the user."
            },
            "city": {
              "type": "string",
              "description": "The city the user resides in."
            },
            "state": {
              "type": "string",
              "description": "The state or province the user resides in."
            },
            "zipCode": {
              "type": "string",
              "description": "The zip code or postal code the user resides in."
            },
            "country": {
              "type": "string",
              "description": "The country the user resides in."
            }
          }
        },
        "locale": {
          "type": "object",
          "description": "The user's localization settings.",
          "title": "Locale",
          "properties": {
            "id": {
              "type": "string",
              "description": "The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference."
            },
            "calendar": {
              "type": "string",
              "description": "The calendar type specified by the user.",
              "enum": [
                "Gregorian",
                "GregorianHijri",
                "Hijri",
                "HijriGregorian"
              ]
            },
            "firstDayOfWeek": {
              "type": "string",
              "description": "The user's preferred first day of the week.",
              "enum": [
                "Sunday",
                "Monday",
                "Saturday"
              ]
            }
          }
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int32",
          "description": "The 'major' version of this product.  Typically changes for releases with significant new features or breaking API changes."
        },
        "minor": {
          "type": "integer",
          "format": "int32",
          "description": "The 'minor' version of this product.  Typically changes for releases with minor feature updates."
        },
        "patch": {
          "type": "integer",
          "format": "int32",
          "description": "The 'patch' version of this product.  Typically changes for backwards-compatible hotfixes."
        },
        "build": {
          "type": "string",
          "description": "An internal identifier for the build artifact backing this version."
        }
      }
    },
    "VersionInfo": {
      "type": "object",
      "properties": {
        "learn": {
          "$ref": "#/definitions/Version"
        }
      }
    },
    "Attempt": {
      "type": "object",
      "required": [
        "created",
        "groupAttemptId",
        "groupOverride",
        "id",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The Id of the User who submitted this attempt.",
          "readOnly": true
        },
        "groupAttemptId": {
          "type": "string",
          "description": "The group attempt ID associated with this student attempt.",
          "readOnly": true
        },
        "groupOverride": {
          "type": "boolean",
          "description": "Whether the score associated with this student attempt was overridden from the associated group attempt score. A value is only returned if the attempt grade is currently overridden.",
          "readOnly": true
        },
        "studentComments": {
          "type": "string",
          "description": "The student comments associated with this attempt."
        },
        "studentSubmission": {
          "type": "string",
          "description": "The student submission text associated with this attempt."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this attempt is ignored when computing the user's grade for the associated grade column."
        },
        "id": {
          "type": "string",
          "description": "The primary ID for this attempt.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this attempt.",
          "enum": [
            "NotAttempted",
            "Abandoned",
            "InProgress",
            "Suspended",
            "Canceled",
            "NeedsGrading",
            "Completed",
            "InMoreProgress",
            "NeedsMoreGrading"
          ]
        },
        "text": {
          "type": "string",
          "description": "The the text representation of grade for this attempt."
        },
        "score": {
          "type": "number",
          "format": "double",
          "description": "The the score associated with this attempt."
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this attempt."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this attempt."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this attempt was created.",
          "readOnly": true
        }
      }
    },
    "Grade": {
      "type": "object",
      "required": [
        "columnId",
        "corrupt",
        "overridden",
        "status",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user ID associated with this grade.",
          "readOnly": true
        },
        "columnId": {
          "type": "string",
          "description": "The grade column ID for this grade.",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The status of this grade.",
          "readOnly": true,
          "enum": [
            "Graded",
            "NeedsGrading"
          ]
        },
        "text": {
          "type": "string",
          "description": "The the text representation of this grade."
        },
        "score": {
          "type": "number",
          "format": "double",
          "description": "The the score associated with this grade."
        },
        "overridden": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which the score associated with this grade was last overridden.  An ISODate value is only returned if this grade is currently overridden; otherwise, returns null.",
          "readOnly": true
        },
        "notes": {
          "type": "string",
          "description": "The instructor notes associated with this grade."
        },
        "feedback": {
          "type": "string",
          "description": "The instructor feedback associated with this grade."
        },
        "exempt": {
          "type": "boolean",
          "description": "Whether the score associated with this grade is ignored when computing the course grade."
        },
        "corrupt": {
          "type": "boolean",
          "description": "Whether the grade for a calculated column could be successfully computed.",
          "readOnly": true
        }
      }
    },
    "GradeColumn": {
      "type": "object",
      "required": [
        "contentId",
        "created",
        "grading",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the grade column.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "The externalId for this grade column"
        },
        "name": {
          "type": "string",
          "description": "The name of the grade column."
        },
        "description": {
          "type": "string",
          "description": "The description of the grade column."
        },
        "externalGrade": {
          "type": "boolean",
          "description": "Whether this grade column is an external grade column."
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "The date this grade column was created.",
          "readOnly": true
        },
        "score": {
          "type": "object",
          "description": "Settings controlling the numerical scoring of this grade column.",
          "title": "Score",
          "properties": {
            "possible": {
              "type": "number",
              "format": "double",
              "description": "The points possible for this grade column."
            },
            "decimalPlaces": {
              "type": "integer",
              "format": "int32",
              "description": "Decimal place precision used to display scores for this grade column."
            }
          }
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling the availability/visibility of grade column data.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether this grade column is available to students",
              "enum": [
                "Yes",
                "No"
              ]
            }
          }
        },
        "grading": {
          "type": "object",
          "description": "Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.",
          "title": "Grading",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of Grading settings for this Grade Column; Manual, Calculated, or Attempts based.",
              "readOnly": true,
              "enum": [
                "Attempts",
                "Calculated",
                "Manual"
              ]
            },
            "due": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which attempts are due for the grade column."
            },
            "attemptsAllowed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of attempts allowed for the grade column."
            },
            "scoringModel": {
              "type": "string",
              "description": "The scoring model for the submitted grade column attempts.",
              "enum": [
                "Last",
                "Highest",
                "Lowest",
                "First",
                "Average"
              ]
            },
            "anonymousGrading": {
              "type": "object",
              "description": "Settings for anonymous grading",
              "title": "AnonymousGrading",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of AnonymousGrading settings for this Attempts based Grade Column; None, Date based, or AfterAllGraded",
                  "enum": [
                    "None",
                    "AfterAllGraded",
                    "Date"
                  ]
                },
                "releaseAfter": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date after which grades are released from being anonymized, if AnonymousGrading type is 'Date'."
                }
              },
              "required": [
                "type"
              ]
            }
          },
          "required": [
            "anonymousGrading",
            "type"
          ]
        },
        "contentId": {
          "type": "string",
          "description": "For grade columns associated with a content item, the ID of the content item.\n\n**Since**: 3000.11.0",
          "readOnly": true
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "enrollment",
        "externalId",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The primary ID of the group.",
          "readOnly": true
        },
        "externalId": {
          "type": "string",
          "description": "An optional externally-defined unique ID for the course. Defaults to a random UUID."
        },
        "name": {
          "type": "string",
          "description": "The title of the group."
        },
        "description": {
          "type": "string",
          "format": "BbML",
          "description": "The description of the group. This field supports BbML."
        },
        "parentId": {
          "type": "string",
          "description": "The primary ID of the group's parent groupset."
        },
        "availability": {
          "type": "object",
          "description": "Settings controlling availability of the group to students.",
          "title": "Availability",
          "properties": {
            "available": {
              "type": "string",
              "description": "Whether the Group is currently available to students.",
              "enum": [
                "Yes",
                "No",
                "SignupOnly"
              ]
            }
          }
        },
        "enrollment": {
          "type": "object",
          "description": "Settings controlling enrollment of the group to students.",
          "title": "Enrollment",
          "properties": {
            "type": {
              "type": "string",
              "description": "Whether the Group allows self enrollment or only enrolled by instructor. This can only be set on creation.",
              "readOnly": true,
              "enum": [
                "InstructorOnly",
                "SelfEnrollment"
              ]
            },
            "limit": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum allowed enrollment size for self enrolled groups."
            },
            "signupSheet": {
              "type": "object",
              "description": "Settings controlling signup to the group for students. Only applicable if Enrollment.Type allows self enrollment.",
              "title": "SignupSheet",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the signup sheet"
                },
                "description": {
                  "type": "string",
                  "format": "BbML",
                  "description": "The description of the signup sheet This field supports BbML."
                },
                "showMembers": {
                  "type": "boolean",
                  "description": "A boolean indicating whether or not members can be seen by others prior to signing up."
                }
              }
            }
          },
          "required": [
            "type"
          ]
        }
      }
    },
    "GroupMembership": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user Id associated with this GroupMembership. See [Group Membership](#group-membership--dependency)#`getUserId`"
        }
      }
    },
    "SISLogEntry": {
      "type": "object",
      "required": [
        "created",
        "id",
        "level",
        "message"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the log message",
          "readOnly": true
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "log message created date",
          "readOnly": true
        },
        "level": {
          "type": "string",
          "description": "An enumerated value of LogLevel describing log verbosity level",
          "readOnly": true,
          "enum": [
            "Debug",
            "Information",
            "Warning",
            "Error"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    }
  },
  "parameters": {
    "childCourseId": {
      "name": "childCourseId",
      "in": "path",
      "description": "The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:math101                    |\n | courseId   | courseId:math101                      |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    },
    "columnId": {
      "name": "columnId",
      "in": "path",
      "description": "The grade column ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.  The ID may also be the keyword 'finalGrade', which indicates that the course's final grade column is specified. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:column1                    |\n | finalGrade | finalGrade                            |\n ",
      "required": true,
      "type": "string"
    },
    "courseId": {
      "name": "courseId",
      "in": "path",
      "description": "The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:math101                    |\n | courseId   | courseId:math101                      |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    },
    "dataSourceId": {
      "name": "dataSourceId",
      "in": "path",
      "description": "The data source ID.  This may be the primary ID, or the secondary ID prefixed with the ID type. \n\n | ID type    | Example            |\n |------------|--------------------|\n | primary    | _123_1             |\n | externalId | externalId:math101 |\n ",
      "required": true,
      "type": "string"
    },
    "externalId": {
      "name": "externalId",
      "in": "query",
      "description": "The 'batchUid' value to use as search criteria.\n\nCurrently only supports 'contains' searches.",
      "required": false,
      "type": "string"
    },
    "fields": {
      "name": "fields",
      "in": "query",
      "description": "A comma-delimited list of fields to include in the response. If not specified, all fields will be returned.",
      "required": false,
      "type": "string"
    },
    "groupId": {
      "name": "groupId",
      "in": "path",
      "description": "The group ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:breakfastClub              |\n ",
      "required": true,
      "type": "string"
    },
    "level": {
      "name": "level",
      "in": "query",
      "description": ": Logs can be filtered with level. Default level is Error. Logs will be pulled of that level and above          i.e. for level = Warning result set will have warning and error level log messages",
      "required": false,
      "type": "string",
      "enum": [
        "Debug",
        "Information",
        "Warning",
        "Error"
      ]
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "description": "The maximum number of results to be returned. There may be less if the query returned less than the maximum.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "offset": {
      "name": "offset",
      "in": "query",
      "description": "The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter.",
      "required": false,
      "type": "integer",
      "format": "int32"
    },
    "termId": {
      "name": "termId",
      "in": "path",
      "description": "The term ID.  This may be the primary ID, or the secondary ID prefixed with the ID type. \n\n | ID type    | Example                |\n |------------|------------------------|\n | primary    | _123_1                 |\n | externalId | externalId:spring.2016 |\n ",
      "required": true,
      "type": "string"
    },
    "userId": {
      "name": "userId",
      "in": "path",
      "description": "The user ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type. \n\n | ID type    | Example                               |\n |------------|---------------------------------------|\n | primary    | _123_1                                |\n | externalId | externalId:jsmith                     |\n | userName   | userName:jsmith                       |\n | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 |\n ",
      "required": true,
      "type": "string"
    }
  }
}
